                 #include <iostream> #include <fstream> #include <cs                                  tring> unsigned int get_text_len(s                                  td::string filename) { std::ifstream ifs; ifs.open(                                  filename); unsigned int len = 0; while (ifs.peek() != EOF) { ifs.get
                 (); len++; } ifs.close(); return len; } void text_t                                  o_line(std::string input_filename,                                   std::string output_filename) { std::ifstream ifs;                                   std::ofstream ofs; ifs.open(input_filename); ofs.open(output_filenam
                 e); while (ifs.peek() != EOF) { char input = ifs.ge                                  t(); if (input < 0) { continue; }                                   if (input == '\n') { ofs.put(' '); } else if (input                                   == '\t') { ofs.put(' '); while (ifs.peek() == '\t' && ifs.peek() !=
                  EOF) { ifs.get(); } } else { ofs.put(input); } } i                                  fs.close(); ofs.close(); } void _s                                  kip_string(std::ifstream& ifs, std::ofstream& ofs)                                   { char input = ifs.get(); while (input != '\"') { if (input == '\\' 
                 && ifs.peek() == '\"') { ofs.put(input); input = if                                  s.get(); } ofs.put(input); input =                                   ifs.get(); } ofs.put(input); } void text_remove_du                                  plicates_spaces(std::string input_filename, std::string output_filen
                 ame) { std::ifstream ifs; std::ofstream ofs; ifs.op                                  en(input_filename); ofs.open(outpu                                  t_filename); while (ifs.peek() != EOF) { char input                                   = ifs.get(); char input_next = ifs.peek(); if (input == '\\' && ifs
                 .peek() == '\"') { ofs.put(input); ofs.put(ifs.get(                                  )); } else if (input == '\"') { of                                  s.put(input); _skip_string(ifs, ofs); } else if (in                                  put == ' ' && ifs.peek() == ' ') { ofs.put(' '); do { ifs.get(); } w
                 hile (ifs.peek() == ' '); } else (ofs.put(input));                                   } ifs.close(); ofs.close(); } void                                   text_remove_waste_spaces(std::string input_filenam                                  e, std::string output_filename) { std::ifstream ifs; std::ofstream o
                 fs; ifs.open(input_filename); ofs.open(output_filen                                  ame); std::string no_space_dict =                                   "-+*/%=.,{}[]()<>;&|"; const char* no_space_dict_c                                   = no_space_dict.c_str(); while (ifs.peek() != EOF) { char input = if
                 s.get(); if (input == '\"') { ofs.put('\"'); _skip_                                  string(ifs, ofs); } else if (input                                   == '\'') { ofs.put(input); input = ifs.get(); if (                                  input == '\\') { ofs.put(input); input = ifs.get(); } ofs.put(input)
; ifs.get(); ofs.                                                                    put('\''); } else                                   if (input == ' '                  && std::strchr(n                                  o_space_dict_c, i                 fs.peek())) { } e                                                   
lse if (std::strc                                                                    hr(no_space_dict_                                  c, input) && ifs.                 peek() == ' ') {                                   ofs.put(input); i                 f (ifs.peek() !=                                                    
EOF) { ifs.get();                                                                     } } else { ofs.p                                  ut(input); } } if                 s.close(); ofs.cl                                  ose(); } void lin                 e_to_code_in_code                                                   
(std::string inpu                                                                    t_filename, std::                                  string output_fil                 ename, bool** mat                                  rix, int height,                  int width, int ch                                                   
ar_remainder = 0)                                                                     { std::ifstream                                   ifs; std::ofstrea                 m ofs; int e_rema                                  inder_iterator =                  0; int e_remainde                                                   
r_right_edge_rema                                                                    inder_iterator =                                   0; bool e_16_full                  = (char_remainde                                  r > width * heigh                 t); if (e_16_full                                                   
) { char_remainde                                                                    r -= (height * wi                                  dth); } bool e_17                 _full = (char_rem                                  ainder > width *                  height); if (e_17                                                   
_full) { char_rem                                                                    ainder -= (height                                   * width); } bool                  e_18_full = (cha                                  r_remainder > wid                 th * height); if                                                    
(e_18_full) { cha                                                                    r_remainder -= (h                                  eight * width); s                 td::cout << "It's                                   so big...  " <<                  char_remainder <<                                                   
 " chars can't be                                                                     include included                                  " << std::endl; }                  int e_remainder_                                  right_edge = char                 _remainder / heig                                                   
ht; if (!e_16_ful                                                                    l) { e_remainder_                                  right_edge += 16                  * width; } else i                                  f (e_16_full && !                 e_17_full) { e_remainder_right_edge += 17 * width
; } else if (e_17                                                                    _full && !e_18_fu                                  ll) { e_remainder                 _right_edge += 18                                   * width; } int e                 _remainder_right_edge_remainder = char_remainder 
% height; int e_r                                                                    emainder_right_ed                                  ge_remainder_bott                 om_edge = 2 * hei                                  ght + e_remainder                 _right_edge_remainder; ifs.open(input_filename); 
ofs.open(output_f                                                                    ilename); for (in                                  t y = 0; y < 5 *                  height; y++) { fo                                  r (int x = 0; x <                  19 * width; x++) { if (y >= 2 * height && y < 3 
* height && x >=                                                                     16 * width) { if                                   (x < 17 * width)                  { if (e_16_full)                                   { if (ifs.peek()                  != EOF) { ofs.put(ifs.get()); } } else { if (e_re
mainder_iterator                                                                     < char_remainder                                   && x < e_remainde                 r_right_edge) { i                                  f (ifs.peek() !=                  EOF) { ofs.put(ifs.get()); } e_remainder_iterato
r++; } else if (x                                                                     == e_remainder_r                                  ight_edge && y <                  e_remainder_right                                  _edge_remainder_b                 ottom_edge) { if (ifs.peek() != EOF) { ofs.put(i
fs.get()); } } }                                                                     } else if (x < 18                                   * width) { if (e                 _17_full) { if (i                                  fs.peek() != EOF)                  { ofs.put(ifs.get()); } } else { if (e_remainde
r_iterator < char                                                                    _remainder && x <                                   e_remainder_righ                 t_edge) { if (ifs                                  .peek() != EOF) {                  ofs.put(ifs.get()); } e_remainder_iterator++; }
 else if (x == e_                                                                    remainder_right_e                                  dge && y < e_rema                 inder_right_edge_                                  remainder_bottom_                 edge) { if (ifs.peek() != EOF) { ofs.put(ifs.get
()); } } } } else                                                                     { if (e_18_full)                                   { if (ifs.peek()                  != EOF) { ofs.pu                                  t(ifs.get()); } }                  else { if (e_rem                                                   
ainder_iterator <                                                                     char_remainder &                                  & x < e_remainder                 _right_edge) { if                                   (ifs.peek() != E                 OF) { ofs.put(ifs                                                   
.get()); } e_rema                                                                    inder_iterator++;                                   } else if (x ==                  e_remainder_right                                  _edge && y < e_re                 mainder_right_edg                                                   
e_remainder_botto                                                                    m_edge) { if (ifs                                  .peek() != EOF) {                  ofs.put(ifs.get(                                  )); } } } } } els                 e if (matrix[y /                                                    
height][x / width                                                                    ]) { if (ifs.peek                                  () != EOF) { ofs.                 put(ifs.get()); }                                   } else { ofs.put                 (' '); } } ofs.pu                                                   
t('\n'); } ifs.cl                                                                    ose(); ofs.close(                                  ); } int main() {                  setlocale(0, "")                                  ; bool** matrix =                  new bool*[5]; fo                                                   
r (int y = 0; y <                                                                     5; y++) { matrix                                  [y] = new bool[19                 ]; } bool layer0[                                  ] = {0, 1, 1, 1,                  0, 0, 1, 1, 0, 0,                                                   
 1, 1, 1, 0, 0, 1                                                                    , 1, 1, 1}; bool                                   layer1[] = {1, 0,                  0, 0, 0, 1, 0, 0                                  , 1, 0, 1, 0, 0,                  1, 0, 1, 0, 0, 0}                                                   
; bool layer2[] =                                                                     {1, 0, 0, 0, 0,                                   1, 0, 0, 1, 0, 1,                  0, 0, 1, 0, 1, 0                                  , 0, 0}; bool lay                 er3[] = {1, 0, 0,                                                   
 0, 0, 1, 0, 0, 1                                                                    , 0, 1, 0, 0, 1,                                   0, 1, 0, 0, 0}; b                 ool layer4[] = {0                                  , 1, 1, 1, 0, 0,                  1, 1, 0, 0, 1, 1,                                                   
                  1, 0, 0, 1, 1, 1, 1}; for (int x = 0; x < 19; x++)                                   { matrix[0][x] = layer0[x]; matri                                  x[1][x] = layer1[x]; matrix[2][x] = layer2[x]; matr                                  ix[3][x] = layer3[x]; matrix[4][x] = layer4[x]; } text_to_line("Sour
                 ce.cpp", "_f1.txt"); text_remove_duplicates_spaces(                                  "_f1.txt", "_f2.txt"); text_remove                                  _waste_spaces("_f2.txt", "_f3.txt"); unsigned int t                                  ext_len_2 = get_text_len("_f1.txt"); unsigned int text_len_3 = get_t
                 ext_len("_f2.txt"); unsigned int text_len_4 = get_t                                  ext_len("_f3.txt"); unsigned int s                                  ymbols_at_pixel_2 = text_len_2 / 42; unsigned int s                                  ymbols_at_pixel_3 = text_len_3 / 42; unsigned int symbols_at_pixel_4
                  = text_len_4 / 42; unsigned int symbols_at_pixel_r                                  emainder_2 = text_len_2 % 42; unsi                                  gned int symbols_at_pixel_remainder_3 = text_len_3                                   % 42; unsigned int symbols_at_pixel_remainder_4 = text_len_4 % 42; s
                 td::cout << "text_len_2: " << text_len_2 << std::en                                  dl << "text_len_3: " << text_len_3                                   << std::endl << "text_len_4: " << text_len_4 << st                                  d::endl << "symbols_at_pixel_2: " << symbols_at_pixel_2 << std::endl
                  << "symbols_at_pixel_3: " << symbols_at_pixel_3 <<                                   std::endl << "symbols_at_pixel_4:                                   " << symbols_at_pixel_4 << std::endl << "symbols_a                                  t_pixel_remainder_2: " << symbols_at_pixel_remainder_2 << " / " << i
                 nt(symbols_at_pixel_remainder_2) - 42 << std::endl                                   << "symbols_at_pixel_remainder_3:                                   " << symbols_at_pixel_remainder_3 << " / " << int(s                                  ymbols_at_pixel_remainder_3) - 42 << std::endl << "symbols_at_pixel_
                 remainder_4: " << symbols_at_pixel_remainder_4 << "                                   / " << int(symbols_at_pixel_remai                                  nder_4) - 42 << std::endl; int input_height = 10; i                                  nt input_width = 17; int char_in_section = input_height * input_widt
                 h; int char_remainder = text_len_3 - char_in_sectio                                  n * 42; std::cout << "Emount of ch                                  ar in cell: " << char_in_section << std::endl; std:                                  :cout << "Char remainder: " << char_remainder; line_to_code_in_code(
                 "_f2.txt", "Output.txt", matrix, input_height, inpu                                  t_width, char_remainder); remove("                                  _f1.txt"); remove("_f2.txt"); remove("_f3.txt"); fo                                  r (int y = 0; y < 5; y++) { delete[] matrix[y]; } delete[] matrix; }
